{"version":3,"file":"index.es.js","sources":["../src/Common.ts","../src/IO.ts","../src/SlimDB.ts"],"sourcesContent":["/**\n * Static class responsible for providing common helper functions that can be used wherever.\n */\nexport class Common {\n  /**\n   * Checks if a string is empty or not.\n   * \n   * @param {string} str String to check.\n   * @returns {boolean} Returns true if the provided string is empty. Otherwise, returns false.\n   */\n  static isStringEmpty(str: string): boolean {\n    return typeof(str) === typeof(String()) && str.length <= 0;\n  }\n}\n","import fs from 'fs';\n\n/**\n * Static class responsible for handling all IO requests.\n */\nexport class IO {\n  /**\n   * Checks if a file exists.\n   * \n   * @param {string} filePath Path to file.\n   * @returns {boolean} Returns true if the provided file exists. Otherwise, returns false.\n   */\n  static exists(filePath: string): boolean {\n    return (filePath !== null && filePath !== undefined) && fs.existsSync(filePath);\n  }\n\n  /**\n   * Reads a JSON file.\n   * \n   * @param {string} filePath Path to file.\n   * @returns {string} Contents of file.\n   */\n  static readFile(filePath: string): string {\n    if (!IO.exists(filePath)) {\n      // TODO: Implement error below.\n      // eslint-disable-next-line\n      // throw new Error(`Cannot read file [${filePath}] because it doesn't exist!`);\n      return '';\n    }\n\n    return fs.readFileSync(filePath, 'utf8').toString();\n  }\n\n  /**\n   * Writes data as JSON to a file.\n   * \n   * @param {string} filePath Path to file.\n   * @param {T} json JSON data to write.\n   * @returns {boolean} Returns true if data was written successfully. Otherwise, returns false.\n   */\n  static writeFile<T extends object>(filePath: string, json: T): boolean {\n    if ((filePath === null || filePath === undefined) || (json === null || json === undefined)) {\n      throw new Error(`Cannot write file because path [${filePath}] isn't valid!`);\n    }\n\n    // Write data to the file.\n    fs.writeFileSync(filePath, typeof(json) === typeof(String()) ? json : JSON.stringify(json));\n\n    return true;\n  }\n\n  /**\n   * Deletes a file from the disk.\n   * \n   * @param {string} filePath Path to file.\n   * @returns {boolean} Returns true if the file was successfully deleted. Otherwise, returns false.\n   */\n  static deleteFile(filePath: string): boolean {\n    if (!IO.exists(filePath)) {\n      throw new Error(`Cannot delete file [${filePath}] because it doesn't exist!`);\n    }\n\n    // Delete the file!\n    fs.unlinkSync(filePath);\n\n    return true;\n  }\n}\n","import { Common } from './Common';\nimport { IO } from './IO';\n\n/**\n * Instance of SlimDB database.\n */\nexport class SlimDB<T extends object> {\n  public path: string;\n  private data: T;\n\n  /**\n   * Create new SlimDB instance.\n   * \n   * @param {string} path Path to database.\n   */\n  constructor(path: string) {\n    this.path = path;\n    this.data = this.load();\n  }\n\n  /**\n   * Loads the database.\n   */\n  public load(): T {\n    const contents = IO.readFile(this.path);\n    return !Common.isStringEmpty(contents) ? JSON.parse(contents) as T : {} as T;\n  }\n\n  /**\n   * Saves the database.\n   */\n  public save(): void {\n    IO.writeFile(this.path, this.data);\n  }\n\n  /**\n   * Returns all data in the database.\n   */\n  public get(): T {\n    return this.data;\n  }\n\n  /**\n   * Update data in the database.\n   * \n   * @param {Function} callback Callback that should modify data and return the result.\n   */\n  public update(callback: Function): void {\n    if (typeof(callback) !== typeof(Function())) {\n      throw new Error('Cannot update data without a valid callback!');\n    }\n\n    // Invoke callback.\n    this.data = callback(this.data) as T;\n  }\n\n  /**\n   * Delete the database file.\n   */\n  public delete(): void {\n    IO.deleteFile(this.path);\n    this.data = {} as T;\n  }\n}\n"],"names":[],"mappings":";;AAAA;;;MAGa,MAAM;;;;;;;IAOjB,OAAO,aAAa,CAAC,GAAW;QAC9B,OAAO,QAAO,GAAG,CAAC,KAAK,QAAO,MAAM,EAAE,CAAC,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC;KAC5D;;;ACVH;;;AAGA,MAAa,EAAE;;;;;;;IAOb,OAAO,MAAM,CAAC,QAAgB;QAC5B,OAAO,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,KAAK,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KACjF;;;;;;;IAQD,OAAO,QAAQ,CAAC,QAAgB;QAC9B,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;;;;YAIxB,OAAO,EAAE,CAAC;SACX;QAED,OAAO,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;KACrD;;;;;;;;IASD,OAAO,SAAS,CAAmB,QAAgB,EAAE,IAAO;QAC1D,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,MAAM,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,EAAE;YAC1F,MAAM,IAAI,KAAK,CAAC,mCAAmC,QAAQ,gBAAgB,CAAC,CAAC;SAC9E;;QAGD,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAO,IAAI,CAAC,KAAK,QAAO,MAAM,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAE5F,OAAO,IAAI,CAAC;KACb;;;;;;;IAQD,OAAO,UAAU,CAAC,QAAgB;QAChC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,uBAAuB,QAAQ,6BAA6B,CAAC,CAAC;SAC/E;;QAGD,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAExB,OAAO,IAAI,CAAC;KACb;CACF;;AChED;;;AAGA,MAAa,MAAM;;;;;;IASjB,YAAY,IAAY;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;KACzB;;;;IAKM,IAAI;QACT,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAM,GAAG,EAAO,CAAC;KAC9E;;;;IAKM,IAAI;QACT,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;;;;IAKM,GAAG;QACR,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;;;;;;IAOM,MAAM,CAAC,QAAkB;QAC9B,IAAI,QAAO,QAAQ,CAAC,KAAK,QAAO,QAAQ,EAAE,CAAC,EAAE;YAC3C,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;;QAGD,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAM,CAAC;KACtC;;;;IAKM,MAAM;QACX,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,EAAO,CAAC;KACrB;CACF;;;;"}